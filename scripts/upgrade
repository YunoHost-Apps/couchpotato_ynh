#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_install_python
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=1

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
port=$(ynh_app_setting_get --app=$app --key=port)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
datadir=$(ynh_app_setting_get --app=$app --key=datadir)

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..." --weight=1

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=1

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# Restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..." --weight=1

ynh_systemd_action --service_name=$app --action="stop" --log_path="/var/log/$app/$app.log"

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/opt/yunohost/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

# If datadir doesn't exist, create it
if [ -z "$datadir" ]; then
	datadir=/home/yunohost.app/$app
	ynh_app_setting_set --app=$app --key=datadir --value=$datadir
	ynh_app_setting_delete --app=$app --key=app_data_dir
fi

# If settings.conf is not at the right place, move it
if [ ! -f "$datadir/settings.conf" ]; then
	ynh_delete_file_checksum --file="$final_path/settings.conf"
	mv "$final_path/settings.conf" "$datadir/settings.conf"
	ynh_store_file_checksum --file="$datadir/settings.conf"
	
	chmod 600 "$datadir/settings.conf"
	chown $app:$app "$datadir/settings.conf"
fi

# Cleaning legacy permissions
if ynh_legacy_permissions_exists; then
	ynh_legacy_permissions_delete_all

	ynh_app_setting_delete --app=$app --key=is_public
fi

# Create a permission if needed
if ! ynh_permission_exists --permission="api"; then
	ynh_permission_create --permission="api" --url="/api" --allowed="visitors" --show_tile="false" --protected="true"
fi

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..." --weight=1

	# Download, check integrity, uncompress and patch the source from app.src
	pushd "$final_path"
		git pull
	popd
fi

chmod 750 "$final_path"
chmod -R o-rwx "$final_path"
chown -R $app:$app "$final_path"

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --weight=1

ynh_install_app_dependencies $pkg_dependencies
ynh_install_python --python_version=$python_version

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# SPECIFIC UPGRADE
#=================================================
# BUILD COUCHPOTATO
#=================================================
ynh_script_progression --message="Building CouchPotato..." --weight=1

ynh_use_python

pushd $final_path
	ynh_pip install --upgrade pyopenssl
	ynh_pip install cheetah
popd

#=================================================
# INSTALL YUNOHOST MULTIMEDIA
#=================================================
ynh_script_progression --message="Install YunoHost multimedia..." --weight=1

# Creates the "Movies" subfolder in "Video"
mkdir -p "$MEDIA_DIRECTORY/share/Video/Movies"

ynh_multimedia_build_main_dir

# Give write access to the yunohost.multimedia directory so that Couchpotato can move Movies to the Movie directory
ynh_multimedia_addaccess $app

#=================================================
# CONFIGURE TRANSMISSION
#=================================================
ynh_script_progression --message="Configuring transmission..." --weight=1

# Variable initialization
rpc=""
blackhole=""
renamer=""

# Transmission link: Preferred method is direct RPC link. If not available, switch to watchdir.
transmission_rpcurl=""
transmission_rpcpassword=""
transmission_watchdir=""

# Check if Transmission is installed
if [[ -z $(yunohost app list | grep -q 'id: $transmission') ]]; then
	
	ynh_script_progression --message="Transmission is not installed. Disabling link to CouchPotato..."
	rpc="0"
	blackhole="0"
	renamer="0"
else
	ynh_script_progression --message="Transmission is installed. Trying to link it to CouchPotato..."
	# Check if the transmission password is in settings
	if [[ -n $(ynh_app_setting_get --app=transmission --key=rpcpassword || true) ]]; then
		ynh_script_progression --message="Transmission will be linked to CouchPotato directly"
		
		transmission_rpcurl="$(ynh_app_setting_get --app=transmission --key=path)transmission"
		transmission_rpcpassword=$(ynh_app_setting_get --app=transmission --key=rpcpassword)
		rpc="1" # Enable Transmission RPC
		blackhole="0" # Disable Transmission Watchdir
		renamer="1" # Enable Renamer
	# If transmission uses YunoHost multimedia, use its folder for the renamer
	else
		# Check if transmission has watchdir enabled
		if [[ -n $(ynh_app_setting_get --app=transmission --key=watchdir || true) ]]; then
			ynh_script_progression --message="Transmission will be linked to CouchPotato with watchdir"
			
			transmission_watchdir=$(ynh_app_setting_get --app=transmission --key=watchdir)
			rpc="0" # Disable Transmission RPC
			blackhole="1" # Enable Transmission Watchdir
			renamer="1" # Enable Renamer	
		# If transmission uses YunoHost multimedia, use its folder for the renamer		
		else
			ynh_script_progression --message="Cannot link Couchpotato to Transmission because Transmission has no RPC password or watchdir available."
			
			rpc="0" # Disable Transmission RPC
			blackhole="0" # Disable Transmission Watchdir
			renamer="0" # Disable Renamer
		fi
	fi
fi

#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression --message="Updating a configuration file..." --weight=1

ynh_backup_if_checksum_is_different --file="$datadir/settings.conf"

chmod 600 "$datadir/settings.conf"
chown $app:$app "$datadir/settings.conf"

#=================================================
# CONFIGURE LOGS
#=================================================
ynh_script_progression --message="Configuring logs..." --weight=1

# Redirect logs directory
app_logs_dir="/var/log/$app"
mkdir -p $app_logs_dir
chown -R $app:$app $app_logs_dir
chmod +x -R $app_logs_dir
ynh_replace_string --match_string="self.log_dir =.*" --replace_string="self.log_dir = '$app_logs_dir'" --target_file="$final_path/CouchPotato.py"

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Upgrading systemd configuration..." --weight=1

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# GENERIC FINALIZATION
#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..." --weight=1

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --weight=1

yunohost service add $app --description="CouchPotato Daemon" --log="/var/log/$app/$app.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=1

ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/$app.log"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
