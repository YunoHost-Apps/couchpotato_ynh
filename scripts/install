#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_install_python
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH

app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_script_progression --message="Validating installation parameters..." --weight=1

final_path=/opt/yunohost/$app
test ! -e "$final_path" || ynh_die --message="This path already contains a folder"

# Register (book) web path
ynh_webpath_register --app=$app --domain=$domain --path_url=$path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..." --weight=1

ynh_app_setting_set --app=$app --key=domain --value=$domain
ynh_app_setting_set --app=$app --key=path --value=$path_url

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_script_progression --message="Finding an available port..." --weight=1

# Find an available port
port=$(ynh_find_port --port=5050)
ynh_app_setting_set --app=$app --key=port --value=$port

# Optional: Expose this port publicly
# (N.B.: you only need to do this if the app actually needs to expose the port publicly.
# If you do this and the app doesn't actually need you are CREATING SECURITY HOLES IN THE SERVER !)

# Open the port
# ynh_script_progression --message="Configuring firewall..." --weight=1
# ynh_exec_warn_less yunohost firewall allow --no-upnp TCP $port

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing dependencies..." --weight=1

ynh_install_app_dependencies $pkg_dependencies
ynh_install_python --python_version=$python_version

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Configuring system user..." --weight=1

# Create a system user
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..." --weight=1

ynh_app_setting_set --app=$app --key=final_path --value=$final_path
# Download, check integrity, uncompress and patch the source from app.src
git clone $source "$final_path"

chmod 750 "$final_path"
chmod -R o-rwx "$final_path"
chown -R $app:$app "$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring NGINX web server..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# SPECIFIC SETUP
#=================================================
# CREATE DATA DIRECTORY
#=================================================
ynh_script_progression --message="Creating a data directory..." --weight=1

datadir=/home/yunohost.app/$app
ynh_app_setting_set --app=$app --key=datadir --value=$datadir

mkdir -p $datadir

chmod 750 "$datadir"
chmod -R o-rwx "$datadir"
chown -R $app:$app "$datadir"

#=================================================
# BUILD COUCHPOTATO
#=================================================
ynh_script_progression --message="Building CouchPotato..." --weight=1

ynh_use_python

pushd $final_path
	ynh_pip install --upgrade pyopenssl
	ynh_pip install cheetah
popd

#=================================================
# INSTALL YUNOHOST MULTIMEDIA
#=================================================
ynh_script_progression --message="Install YunoHost multimedia..." --weight=1

# Creates the "Movies" subfolder in "Video"
mkdir -p "$MEDIA_DIRECTORY/share/Video/Movies"

ynh_multimedia_build_main_dir

# Give write access to the yunohost.multimedia directory so that Couchpotato can move Movies to the Movie directory
ynh_multimedia_addaccess $app

#=================================================
# CONFIGURE TRANSMISSION
#=================================================
ynh_script_progression --message="Configuring transmission..." --weight=1

# Variable initialization
rpc=""
blackhole=""
renamer=""

# Transmission link: Preferred method is direct RPC link. If not available, switch to watchdir.
transmission_rpcurl=""
transmission_rpcpassword=""
transmission_watchdir=""

# Check if Transmission is installed
if [[ -z $(yunohost app list | grep -q 'id: $transmission') ]]; then
	
	ynh_script_progression --message="Transmission is not installed. Disabling link to CouchPotato..."
	rpc="0"
	blackhole="0"
	renamer="0"
else
	ynh_script_progression --message="Transmission is installed. Trying to link it to CouchPotato..."
	# Check if the transmission password is in settings
	if [[ -n $(ynh_app_setting_get --app=transmission --key=rpcpassword || true) ]]; then
		ynh_script_progression --message="Transmission will be linked to CouchPotato directly"
		
		transmission_rpcurl="$(ynh_app_setting_get --app=transmission --key=path)transmission"
		transmission_rpcpassword=$(ynh_app_setting_get --app=transmission --key=rpcpassword)
		rpc="1" # Enable Transmission RPC
		blackhole="0" # Disable Transmission Watchdir
		renamer="1" # Enable Renamer
	# If transmission uses YunoHost multimedia, use its folder for the renamer
	else
		# Check if transmission has watchdir enabled
		if [[ -n $(ynh_app_setting_get --app=transmission --key=watchdir || true) ]]; then
			ynh_script_progression --message="Transmission will be linked to CouchPotato with watchdir"
			
			transmission_watchdir=$(ynh_app_setting_get --app=transmission --key=watchdir)
			rpc="0" # Disable Transmission RPC
			blackhole="1" # Enable Transmission Watchdir
			renamer="1" # Enable Renamer	
		# If transmission uses YunoHost multimedia, use its folder for the renamer		
		else
			ynh_script_progression --message="Cannot link Couchpotato to Transmission because Transmission has no RPC password or watchdir available."
			
			rpc="0" # Disable Transmission RPC
			blackhole="0" # Disable Transmission Watchdir
			renamer="0" # Disable Renamer
		fi
	fi
fi

#=================================================
# ADD A CONFIGURATION
#=================================================
ynh_script_progression --message="Adding a configuration file..." --weight=1

ynh_add_config --template="../conf/couchpotato.conf" --destination="$datadir/settings.conf"

chmod 600 "$datadir/settings.conf"
chown $app:$app "$datadir/settings.conf"

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Configuring a systemd service..." --weight=1

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# CONFIGURE LOGS
#=================================================
ynh_script_progression --message="Configuring logs..." --weight=1

# Redirect logs directory
app_logs_dir="/var/log/$app"
mkdir -p $app_logs_dir
chown -R $app:$app $app_logs_dir
chmod +x -R $app_logs_dir
ynh_replace_string --match_string="self.log_dir =.*" --replace_string="self.log_dir = '$app_logs_dir'" --target_file="$final_path/CouchPotato.py"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Configuring log rotation..." --weight=1

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --weight=1

yunohost service add $app --description="CouchPotato Daemon" --log="/var/log/$app/$app.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=1

# Start a systemd service
ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/$app.log"

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Configuring permissions..." --weight=1

ynh_permission_update --permission="main" --add="visitors"

# Everyone can access to the api part
# We don't want to display the tile in the sso so we put --show_tile="false"
# And we don't want that the YunoHost Admin can remove visitors group to this permission, so we put --protected="true"
ynh_permission_create --permission="api" --url="/api" --allowed="visitors" --show_tile="false" --protected="true"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --last
